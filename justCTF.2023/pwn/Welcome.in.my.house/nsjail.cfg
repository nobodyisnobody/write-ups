name: "pwn-welcome-in-my-house"

mode: LISTEN
hostname: "pwn-welcome-in-my-house"

bindhost: "0.0.0.0"
port: 1337

max_conns_per_ip: 30

uidmap {
	inside_id: "jailed"
	outside_id: "jailed"
}

gidmap {
	inside_id: "jailed"
	outside_id: "jailed"
}

cwd: "/jailed/"

# The default is 0,1,2 anyway
pass_fd: 0
pass_fd: 1
pass_fd: 2
#stderr_to_null: true	# This disables stderr, we don't want it here

# Should the current environment variables be kept when executing the binary?
keep_env: false

# Note: this requires that the process is in host cgroup namespace
# (in docker, run with --cgroupns=host)
# If you have troubles with cgroups, you can just comment this out.
use_cgroupv2: true
# Maximum number of PIDs in the cgroup (i.e. we won't be able to spawn more than the number here)
cgroup_pids_max: 10
# Maximum memory usage in the cgroup in bytes (i.e. attempts to allocate more will fail)
cgroup_mem_max: 67108864 # 64 MiB -- Note that too low will make it swapped to disk which is bad
# number of ms per sec of CPU time the jailed process can use
cgroup_cpu_ms_per_sec: 900

# Timeout
time_limit: 100

# Limits
rlimit_cpu: 160		# amount of CPU time the process can consume in seconds
max_cpus: 1 		# max number of CPUs to use: 0 - no limit
rlimit_as: 128		# max size of process' virtual memory address space in MiB
rlimit_fsize: 32	# max size of files the process may create in MiB
rlimit_stack: 32	# max size of the process stack, in MiB
rlimit_nofile: 32   	# maximum file descriptor number

# DO NOT change
rlimit_core: 0  # max size of a core file in MiB; 0 means no core dump files are created
rlimit_stack_type: SOFT
rlimit_nproc_type: SOFT

# Should /proc be mounted as R/O?
mount_proc: false

mount {
    src: "/lib"
    dst: "/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/lib64"
    dst: "/lib64"
    is_bind: true
    rw: false
}

mount {
    src: "/usr"
    dst: "/usr"
    is_bind: true
    rw: false
}

mount {
    src: "/jailed"
    dst: "/jailed"
    is_bind: true
    rw: false
}

# The task do not need this
#mount {
#    dst: "/tmp"
#    fstype: "tmpfs"
#    rw: true
#}

# If you want to test/use /bin/sh etc.
mount {
    src: "/bin"
    dst: "/bin"
    is_bind: true
    rw: false
}
exec_bin {
    path: "/jailed/house"
}

